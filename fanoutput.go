package logberry

// FanOutput is an OutputDriver that takes log events and sends them
// to multiple client OutputDrivers.  Root objects directly provide
// for having multiple outputs.  However, FanOutput permits
// arrangements such as connecting a Root to a ThreadSafeOutput and
// then to a FanOutput and in turn several other drivers, thus
// protecting that group.
//
// Note that FanOutput does not copy the log event details, so if any
// of the client drivers changes the associated structures (the
// Context or D), the clients added later will see those changes.
type FanOutput struct {
	root    *Root
	drivers []OutputDriver
}

// NewFanOutput creates a new FanOutput logger.
func NewFanOutput() *FanOutput {
	return &FanOutput{
		drivers: make([]OutputDriver, 0),
	}
}

// AddOutputDriver adds an OutputDriver to the list of outputs to
// which log events are being fanned out.
func (x *FanOutput) AddOutputDriver(out OutputDriver) {
	x.drivers = append(x.drivers, out)
}

// Attach notifies the OutputDriver of its Root.  It should only be
// called by a Root.
func (x *FanOutput) Attach(root *Root) {
	x.root = root
	for _, out := range x.drivers {
		out.Attach(root)
	}
}

// Detach notifies the OutputDriver that it has been removed from its
// Root.  It should only be called by a root.
func (x *FanOutput) Detach() {
	for _, out := range x.drivers {
		out.Detach()
	}
	x.root = nil
}

// ComponentEvent logs an event generated by a Component.  It should
// only be called by a Root or an OutputDriver chaining outputs.
func (x *FanOutput) ComponentEvent(component *Component,
	class ComponentEventClass,
	msg string,
	data *D) {

	for _, out := range x.drivers {
		out.ComponentEvent(component, class, msg, data)
	}

}

// TaskEvent logs an event generated by a Task.  It should only be
// called by a Root or an OutputDriver chaining outputs.
func (x *FanOutput) TaskEvent(task *Task,
	event TaskEventClass) {

	for _, out := range x.drivers {
		out.TaskEvent(task, event)
	}

}

// TaskProgress logs an event generated by a Task.  It should only be
// called by a Root or an OutputDriver chaining outputs.
func (x *FanOutput) TaskProgress(task *Task,
	event TaskEventClass,
	msg string,
	data *D) {

	for _, out := range x.drivers {
		out.TaskProgress(task, event, msg, data)
	}

}
